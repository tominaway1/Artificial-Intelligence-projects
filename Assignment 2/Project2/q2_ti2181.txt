All these statistics are computed against Greedy:

The number of nodes generated: 

I count the number of times the min-max algorithm is called. For alpha-beta, I had about 65971 when black and 102052 when white when the depth was 4. I had about 20462 when black and 14757 when white when the depth was 3. I had about 2000 when black and 1099 when white when the depth was 2. I had about 1099 when black and 731 when white when the depth was 1. For min-max without alpha beta pruning, for depth 2 I had 21864 nodes as black and 22415 nodes as white.  


The number of duplicates:
I created a function that will convert a board to a sequence of 0,1, and -1s and stored it into a dictionary. Then I counted every element that has more than 1 copies. I had 1394 duplicates as black and 1336 duplicates as white when depth was 4. I had 19508 duplicates as black and 14235 duplicates as white when depth was 3. I had 1763 duplicates as black and 3087 duplicates as white when depth was 2. I had 139 duplicates as black and 99 duplicates as white when depth was 1.For min-max without alpha beta pruning, for depth 2 I had as 10721 duplicates as black and 10311 as white. 

The average branching factor
I counted the number of nonterminals, and divided the total number of nodes generated by that number. I had an average of 4 per node and for both white around black when depth was 4. I had an average of 6 per node and for both white around black when depth was 3. I had an average of 3 per node and for both white around black when depth is 2. I had an average of 9 per node and for both white around black when depth is 1. This may be skewed because I implement algorithms that minimize the moves generated for a given node by opting out a lot of the moves before running it though min max. The further down the depth, the more I opt out. For min-max without alpha beta pruning, for depth 2 I had 10.7 as black and 10.1 as white.  

The average time per move:

I find the inital time when the function is first called and then when the function is about the be returned, I find the difference between that time and the current time to find the duration it took to finish computation. When black, I had around .81 seconds per turn and as white I had 1.5 seconds per turn when the depth is 4. When black, I had around .24 seconds per turn and as white I had .21 seconds per turn when the depth is 3. When black, I had around .029 seconds per turn and as white I had .053 seconds per turn when the depth is 2. When black, I had around .010 seconds per turn and as white I had .015 seconds per turn when the depth is 1. For min-max without alpha beta pruning, for depth 2 I had as 1.56 seconds black and 1.24 seconds as white. 


Summary:
This clearly shows the effectiveness of Alpha beta pruning. I had almost 10 times less nodes generated when alpha beta is implemented. In fact when the depth was doubled, I was still generating less nodes than I did without alpha beta. The duplicates were also significantly reduced. I had about 10 times less when using alpha beta. For the average branching factor, I effectively halfed the number of children per node. However, alot of my preprocessing cuts down this number so I cannot say that this is all due to alpha beta pruning. The average time per move actually is about the same but considering how many more moves it takes without alpha beta, it's not worth it in the long run.



